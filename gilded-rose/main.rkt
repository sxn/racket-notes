#lang racket/base

(require "gilded-rose.rkt")

(define (item-to-string item)
  (string-append (item-name item) ", " (number->string (item-sell-in item)) ", " (number->string (item-quality item))))

(display "actual")
(newline)
(let ((items (list (item "+5 Dexterity Vest" 10 20)
                   (item "Aged Brie" 2 0)
                   (item "Elixir of the Mongoose" 5 7)
                   (item "Sulfuras, Hand of Ragnaros" 0 80)
                   (item "Sulfuras, Hand of Ragnaros" -1 80)
                   (item "Backstage passes to a TAFKAL80ETC concert" 15 20)
                   (item "Backstage passes to a TAFKAL80ETC concert" 10 49)
                   (item "Backstage passes to a TAFKAL80ETC concert" 5 49)
                   (item "Conjured Mana Cake" 3 6)))
      (days 31))

  (define (loop day)
    (cond ((< day days)
           (display (string-append "-------- day " (number->string day) " --------"))
           (newline)
           (display "name, sell-in, quality")
           (newline)
           (for-each
            (lambda (item)
              (display (item-to-string item))
              (newline))
            items)
           (newline)
           (set! items (update-quality items))
           (loop (+ day 1)))))
  (loop 0))
